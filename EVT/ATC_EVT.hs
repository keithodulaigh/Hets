{-# OPTIONS -w -O0 #-}
{- |
Module      :  EVT/ATC_EVT.der.hs
Description :  generated ShATermConvertible instances
Copyright   :  (c) DFKI GmbH 2012
License     :  GPLv2 or higher, see LICENSE.txt

Maintainer  :  Christian.Maeder@dfki.de
Stability   :  provisional
Portability :  non-portable(derive Typeable instances)

Automatic derivation of instances via DrIFT-rule ShATermConvertible
  for the type(s):
'EVT.AS.RSRelType'
'EVT.AS.RSQualId'
'EVT.AS.RSRel'
'EVT.AS.RSRelationships'
'EVT.AS.RSScheme'
'EVT.Sign.RSDatatype'
'EVT.Sign.RSSymbol'
'EVT.Sign.RSColumn'
'EVT.Sign.RSTable'
'EVT.Sign.RSTables'
'EVT.Sign.RSTMap'
'EVT.Sign.RSMorphism'
-}

{-
Generated by 'genRules' (automatic rule generation for DrIFT). Don't touch!!
  dependency files:
EVT/AS.hs
EVT/Sign.hs
-}

module EVT.ATC_EVT () where

import ATC.GlobalAnnotations
import ATerm.Lib
import Common.AS_Annotation
import Common.Doc
import Common.DocUtils
import Common.Id
import Common.Result
import Common.Utils
import Data.Data
import EVT.AS
import EVT.Keywords
import EVT.Sign
import qualified Data.Map as Map
import qualified Data.Set as Set

{-! for EVT.AS.RSRelType derive : ShATermConvertible !-}
{-! for EVT.AS.RSQualId derive : ShATermConvertible !-}
{-! for EVT.AS.RSRel derive : ShATermConvertible !-}
{-! for EVT.AS.RSRelationships derive : ShATermConvertible !-}
{-! for EVT.AS.RSScheme derive : ShATermConvertible !-}
{-! for EVT.Sign.RSDatatype derive : ShATermConvertible !-}
{-! for EVT.Sign.RSSymbol derive : ShATermConvertible !-}
{-! for EVT.Sign.RSColumn derive : ShATermConvertible !-}
{-! for EVT.Sign.RSTable derive : ShATermConvertible !-}
{-! for EVT.Sign.RSTables derive : ShATermConvertible !-}
{-! for EVT.Sign.RSTMap derive : ShATermConvertible !-}
{-! for EVT.Sign.RSMorphism derive : ShATermConvertible !-}

-- Generated by DrIFT, look but don't touch!

instance ShATermConvertible RSScheme where
  toShATermAux att0 xv = case xv of
    RSScheme a b c -> do
      (att1, a') <- toShATerm' att0 a
      (att2, b') <- toShATerm' att1 b
      (att3, c') <- toShATerm' att2 c
      return $ addATerm (ShAAppl "RSScheme" [a', b', c'] []) att3
  fromShATermAux ix att0 = case getShATerm ix att0 of
    ShAAppl "RSScheme" [a, b, c] _ ->
      case fromShATerm' a att0 of
      { (att1, a') ->
      case fromShATerm' b att1 of
      { (att2, b') ->
      case fromShATerm' c att2 of
      { (att3, c') ->
      (att3, RSScheme a' b' c') }}}
    u -> fromShATermError "RSScheme" u

instance ShATermConvertible RSRelationships where
  toShATermAux att0 xv = case xv of
    RSRelationships a b -> do
      (att1, a') <- toShATerm' att0 a
      (att2, b') <- toShATerm' att1 b
      return $ addATerm (ShAAppl "RSRelationships" [a', b'] []) att2
  fromShATermAux ix att0 = case getShATerm ix att0 of
    ShAAppl "RSRelationships" [a, b] _ ->
      case fromShATerm' a att0 of
      { (att1, a') ->
      case fromShATerm' b att1 of
      { (att2, b') ->
      (att2, RSRelationships a' b') }}
    u -> fromShATermError "RSRelationships" u

instance ShATermConvertible RSRel where
  toShATermAux att0 xv = case xv of
    RSRel a b c d -> do
      (att1, a') <- toShATerm' att0 a
      (att2, b') <- toShATerm' att1 b
      (att3, c') <- toShATerm' att2 c
      (att4, d') <- toShATerm' att3 d
      return $ addATerm (ShAAppl "RSRel" [a', b', c', d'] []) att4
  fromShATermAux ix att0 = case getShATerm ix att0 of
    ShAAppl "RSRel" [a, b, c, d] _ ->
      case fromShATerm' a att0 of
      { (att1, a') ->
      case fromShATerm' b att1 of
      { (att2, b') ->
      case fromShATerm' c att2 of
      { (att3, c') ->
      case fromShATerm' d att3 of
      { (att4, d') ->
      (att4, RSRel a' b' c' d') }}}}
    u -> fromShATermError "RSRel" u

instance ShATermConvertible RSQualId where
  toShATermAux att0 xv = case xv of
    RSQualId a b c -> do
      (att1, a') <- toShATerm' att0 a
      (att2, b') <- toShATerm' att1 b
      (att3, c') <- toShATerm' att2 c
      return $ addATerm (ShAAppl "RSQualId" [a', b', c'] []) att3
  fromShATermAux ix att0 = case getShATerm ix att0 of
    ShAAppl "RSQualId" [a, b, c] _ ->
      case fromShATerm' a att0 of
      { (att1, a') ->
      case fromShATerm' b att1 of
      { (att2, b') ->
      case fromShATerm' c att2 of
      { (att3, c') ->
      (att3, RSQualId a' b' c') }}}
    u -> fromShATermError "RSQualId" u

instance ShATermConvertible RSRelType where
  toShATermAux att0 xv = case xv of
    RSone_to_one -> return $ addATerm (ShAAppl "RSone_to_one" [] []) att0
    RSone_to_many -> return $ addATerm (ShAAppl "RSone_to_many" [] []) att0
    RSmany_to_one -> return $ addATerm (ShAAppl "RSmany_to_one" [] []) att0
    RSmany_to_many -> return $ addATerm (ShAAppl "RSmany_to_many" [] []) att0
  fromShATermAux ix att0 = case getShATerm ix att0 of
    ShAAppl "RSone_to_one" [] _ -> (att0, RSone_to_one)
    ShAAppl "RSone_to_many" [] _ -> (att0, RSone_to_many)
    ShAAppl "RSmany_to_one" [] _ -> (att0, RSmany_to_one)
    ShAAppl "RSmany_to_many" [] _ -> (att0, RSmany_to_many)
    u -> fromShATermError "RSRelType" u

instance ShATermConvertible RSMorphism where
  toShATermAux att0 xv = case xv of
    RSMorphism a b c d -> do
      (att1, a') <- toShATerm' att0 a
      (att2, b') <- toShATerm' att1 b
      (att3, c') <- toShATerm' att2 c
      (att4, d') <- toShATerm' att3 d
      return $ addATerm (ShAAppl "RSMorphism" [a', b', c', d'] []) att4
  fromShATermAux ix att0 = case getShATerm ix att0 of
    ShAAppl "RSMorphism" [a, b, c, d] _ ->
      case fromShATerm' a att0 of
      { (att1, a') ->
      case fromShATerm' b att1 of
      { (att2, b') ->
      case fromShATerm' c att2 of
      { (att3, c') ->
      case fromShATerm' d att3 of
      { (att4, d') ->
      (att4, RSMorphism a' b' c' d') }}}}
    u -> fromShATermError "RSMorphism" u

instance ShATermConvertible RSTMap where
  toShATermAux att0 xv = case xv of
    RSTMap a -> do
      (att1, a') <- toShATerm' att0 a
      return $ addATerm (ShAAppl "RSTMap" [a'] []) att1
  fromShATermAux ix att0 = case getShATerm ix att0 of
    ShAAppl "RSTMap" [a] _ ->
      case fromShATerm' a att0 of
      { (att1, a') ->
      (att1, RSTMap a') }
    u -> fromShATermError "RSTMap" u

instance ShATermConvertible RSTables where
  toShATermAux att0 xv = case xv of
    RSTables a -> do
      (att1, a') <- toShATerm' att0 a
      return $ addATerm (ShAAppl "RSTables" [a'] []) att1
  fromShATermAux ix att0 = case getShATerm ix att0 of
    ShAAppl "RSTables" [a] _ ->
      case fromShATerm' a att0 of
      { (att1, a') ->
      (att1, RSTables a') }
    u -> fromShATermError "RSTables" u

instance ShATermConvertible RSTable where
  toShATermAux att0 xv = case xv of
    RSTable a b c d -> do
      (att1, a') <- toShATerm' att0 a
      (att2, b') <- toShATerm' att1 b
      (att3, c') <- toShATerm' att2 c
      (att4, d') <- toShATerm' att3 d
      return $ addATerm (ShAAppl "RSTable" [a', b', c', d'] []) att4
  fromShATermAux ix att0 = case getShATerm ix att0 of
    ShAAppl "RSTable" [a, b, c, d] _ ->
      case fromShATerm' a att0 of
      { (att1, a') ->
      case fromShATerm' b att1 of
      { (att2, b') ->
      case fromShATerm' c att2 of
      { (att3, c') ->
      case fromShATerm' d att3 of
      { (att4, d') ->
      (att4, RSTable a' b' c' d') }}}}
    u -> fromShATermError "RSTable" u

instance ShATermConvertible RSColumn where
  toShATermAux att0 xv = case xv of
    RSColumn a b c -> do
      (att1, a') <- toShATerm' att0 a
      (att2, b') <- toShATerm' att1 b
      (att3, c') <- toShATerm' att2 c
      return $ addATerm (ShAAppl "RSColumn" [a', b', c'] []) att3
  fromShATermAux ix att0 = case getShATerm ix att0 of
    ShAAppl "RSColumn" [a, b, c] _ ->
      case fromShATerm' a att0 of
      { (att1, a') ->
      case fromShATerm' b att1 of
      { (att2, b') ->
      case fromShATerm' c att2 of
      { (att3, c') ->
      (att3, RSColumn a' b' c') }}}
    u -> fromShATermError "RSColumn" u

instance ShATermConvertible RSSymbol where
  toShATermAux att0 xv = case xv of
    STable a -> do
      (att1, a') <- toShATerm' att0 a
      return $ addATerm (ShAAppl "STable" [a'] []) att1
    SColumn a b c d -> do
      (att1, a') <- toShATerm' att0 a
      (att2, b') <- toShATerm' att1 b
      (att3, c') <- toShATerm' att2 c
      (att4, d') <- toShATerm' att3 d
      return $ addATerm (ShAAppl "SColumn" [a', b', c', d'] []) att4
  fromShATermAux ix att0 = case getShATerm ix att0 of
    ShAAppl "STable" [a] _ ->
      case fromShATerm' a att0 of
      { (att1, a') ->
      (att1, STable a') }
    ShAAppl "SColumn" [a, b, c, d] _ ->
      case fromShATerm' a att0 of
      { (att1, a') ->
      case fromShATerm' b att1 of
      { (att2, b') ->
      case fromShATerm' c att2 of
      { (att3, c') ->
      case fromShATerm' d att3 of
      { (att4, d') ->
      (att4, SColumn a' b' c' d') }}}}
    u -> fromShATermError "RSSymbol" u

instance ShATermConvertible RSDatatype where
  toShATermAux att0 xv = case xv of
    RSboolean -> return $ addATerm (ShAAppl "RSboolean" [] []) att0
    RSbinary -> return $ addATerm (ShAAppl "RSbinary" [] []) att0
    RSdate -> return $ addATerm (ShAAppl "RSdate" [] []) att0
    RSdatetime -> return $ addATerm (ShAAppl "RSdatetime" [] []) att0
    RSdecimal -> return $ addATerm (ShAAppl "RSdecimal" [] []) att0
    RSfloat -> return $ addATerm (ShAAppl "RSfloat" [] []) att0
    RSinteger -> return $ addATerm (ShAAppl "RSinteger" [] []) att0
    RSstring -> return $ addATerm (ShAAppl "RSstring" [] []) att0
    RStext -> return $ addATerm (ShAAppl "RStext" [] []) att0
    RStime -> return $ addATerm (ShAAppl "RStime" [] []) att0
    RStimestamp -> return $ addATerm (ShAAppl "RStimestamp" [] []) att0
    RSdouble -> return $ addATerm (ShAAppl "RSdouble" [] []) att0
    RSnonPosInteger -> return $ addATerm (ShAAppl "RSnonPosInteger" [] []) att0
    RSnonNegInteger -> return $ addATerm (ShAAppl "RSnonNegInteger" [] []) att0
    RSlong -> return $ addATerm (ShAAppl "RSlong" [] []) att0
    RSPointer -> return $ addATerm (ShAAppl "RSPointer" [] []) att0
  fromShATermAux ix att0 = case getShATerm ix att0 of
    ShAAppl "RSboolean" [] _ -> (att0, RSboolean)
    ShAAppl "RSbinary" [] _ -> (att0, RSbinary)
    ShAAppl "RSdate" [] _ -> (att0, RSdate)
    ShAAppl "RSdatetime" [] _ -> (att0, RSdatetime)
    ShAAppl "RSdecimal" [] _ -> (att0, RSdecimal)
    ShAAppl "RSfloat" [] _ -> (att0, RSfloat)
    ShAAppl "RSinteger" [] _ -> (att0, RSinteger)
    ShAAppl "RSstring" [] _ -> (att0, RSstring)
    ShAAppl "RStext" [] _ -> (att0, RStext)
    ShAAppl "RStime" [] _ -> (att0, RStime)
    ShAAppl "RStimestamp" [] _ -> (att0, RStimestamp)
    ShAAppl "RSdouble" [] _ -> (att0, RSdouble)
    ShAAppl "RSnonPosInteger" [] _ -> (att0, RSnonPosInteger)
    ShAAppl "RSnonNegInteger" [] _ -> (att0, RSnonNegInteger)
    ShAAppl "RSlong" [] _ -> (att0, RSlong)
    ShAAppl "RSPointer" [] _ -> (att0, RSPointer)
    u -> fromShATermError "RSDatatype" u
